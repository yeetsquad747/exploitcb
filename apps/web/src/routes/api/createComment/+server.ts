import { PrismaClient } from '@prisma/client';
import { json } from '@sveltejs/kit';
import jwt, { type JwtPayload } from 'jsonwebtoken';
import Ajv, { type JSONSchemaType } from 'ajv';

const ajv = new Ajv();
const prisma = new PrismaClient();

interface Data {
  token: string;
  content: string;
  post_id: number;
}

const schema: JSONSchemaType<Data> = {
  type: 'object',
  properties: {
    content: { type: 'string' },
    token: { type: 'string' },
    post_id: { type: 'number' }
  },
  required: ['content', 'token', 'post_id']
};

const validate = ajv.compile(schema);

/**
 * Function to handle POST requests to /api/createComment
 * @param params The request parameters
 * @returns A response to the request
 */
export async function POST(params: {
  request: { json: () => Promise<{ content: string; token: string; post_id: number }> };
}) {
  const data = await params.request.json();
  let token: JwtPayload | string = { id: null };
  jwt.verify(data.token, String(process.env.JWT_KEY), (err, decoded) => {
    if (err || decoded === undefined) {
      return json('Invalid token');
    }
    token = decoded;
    return null;
  });
  if (validate(data)) {
    return await json(validate.errors);
  }
  const user = await prisma.user.findUnique({
    where: {
      user_id: token.id
    }
  });
  if (!user) {
    return await json('Invalid token');
  }
  const id = Math.floor(Math.random() * 10000000000000000);
  try {
    await prisma.comment.create({
      data: {
        comment_id: id,
        body: data['content'],
        user: {
          connect: {
            user_id: token.id
          }
        },
        post: {
          connect: {
            post_id: data['post_id']
          }
        }
      }
    });
  } catch {
    return await json('Something went wrong, try that again');
  }
  return await json({ id });
}
