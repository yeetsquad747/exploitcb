import { PrismaClient } from '@prisma/client';
import { json } from '@sveltejs/kit';
import type { JSONSchemaType } from 'ajv';
import Ajv from 'ajv';
import jwt from 'jsonwebtoken';

const ajv = new Ajv();
const prisma = new PrismaClient();

interface Data {
  token: string;
  title: string;
  content: string;
}

const schema: JSONSchemaType<Data> = {
  type: 'object',
  properties: {
    title: { type: 'string' },
    content: { type: 'string' },
    token: { type: 'string' }
  },
  required: ['title', 'content', 'token']
};

const validate = ajv.compile(schema);

/**
 * Function to handle POST requests to /api/createPost
 * @param params The request parameters
 * @returns A response to the request
 */
export async function POST(params: {
  request: { json: () => { title: string; content: string; token: string } };
}) {
  const data = await params.request.json();
  if (!validate(data)) {
    return await json(validate.errors);
  }
  const user = await prisma.user.findUnique({
    where: {
      // @ts-ignore
      user_id: jwt.decode(data.token).id
    }
  });
  if (!user) {
    return await json('Invalid token');
  }
  let tokenIsValid = false;
  try {
    // @ts-ignore
    tokenIsValid = await jwt.verify(data.token, process.env.JWT_KEY);
  } catch (error) {
    return await json('Invalid token');
  }
  if (tokenIsValid) {
    const id = Math.floor(Math.random() * 10000000000000000);
    try {
      await prisma.post.create({
        // @ts-ignore
        data: {
          post_id: id,
          title: data.title,
          body: data.content,
          comments: {},
          user: {
            connect: {
              // @ts-ignore
              user_id: jwt.decode(data.token).id
            }
          }
        }
      });
    } catch {
      return await json('Something went wrong, try that again');
    }
    return await json({
      id
    });
  }
}
