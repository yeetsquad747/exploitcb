import { PrismaClient } from '@prisma/client';
import { json } from '@sveltejs/kit';
import type { JSONSchemaType } from 'ajv';
import Ajv from 'ajv';
import jwt from 'jsonwebtoken';

const ajv = new Ajv();
const prisma = new PrismaClient();

interface Data {
  token: string;
  comment_id: number;
}

const schema: JSONSchemaType<Data> = {
  type: 'object',
  properties: {
    comment_id: { type: 'number' },
    token: { type: 'string' }
  },
  required: ['token', 'comment_id']
};

const validate = ajv.compile(schema);

/**
 * Function to handle DELETE requests to /api/deleteComment
 * @param params The request parameters
 * @returns A response to the request
 */
export async function DELETE(params: {
  request: { json: () => { comment_id: number; token: string } };
}) {
  const data = await params.request.json();
  if (!validate(data)) {
    return await json(validate.errors);
  }
  let user_id;
  try {
    // @ts-ignore
    user_id = jwt.decode(data.token).id;
  } catch {
    return await json('Invalid token');
  }
  const comment = await prisma.comment.findUnique({
    where: {
      comment_id: data.comment_id
    }
  });

  if (comment?.user_id === user_id) {
    await prisma.post.delete({
      where: {
        post_id: data.comment_id
      }
    });
    return await json('Deleted comment');
  }
  return await json('There was an comment in deleting the post');
}
